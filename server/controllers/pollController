// controllers/pollController.js
const Poll = require("../models/Poll");
const Question = require("../models/Question");
const Option = require("../models/Option.js");

const createPoll = async (req, res) => {
  try {
    // Destructuring necessary fields from the request body
    const { title, category, startDate, endDate, minReward, maxReward } =
      req.body;

    // Creating a new poll
    const newPoll = await Poll.create({
      title,
      category,
      startDate,
      endDate,
      minReward,
      maxReward,
    });

    res.status(201).json({
      success: true,
      message: "Poll created successfully",
      data: newPoll,
    });
  } catch (error) {
    console.error("Error creating poll:", error);
    res.status(500).json({
      success: false,
      message: "Internal server error",
      error: error.message,
    });
  }
};

const getAllPolls = async (req, res) => {
  try {
    // Fetch all polls with associated questions and options
    const allPolls = await Poll.findAll({
      include: [
        {
          model: Question,
          include: Option,
        },
      ],
    });

    if (allPolls.length === 0) {
      return res.status(404).json({
        success: false,
        message: "No polls found",
      });
    }

    // Map the results to the required format
    const pollsData = allPolls.map((poll) => ({
      title: poll.title,
      category: poll.category,
      startDate: poll.startDate,
      endDate: poll.endDate,
      totalVotes: poll.totalVotes, // Assuming you update this field somewhere in your logic
      numQuestionSets: poll.Questions.length,
      detailsOfOneQuestion: {
        questionText: poll.Questions.length > 0 ? poll.Questions[0].text : null,
        options: poll.Questions.length > 0 ? poll.Questions[0].Options : null,
      },
    }));

    res.status(200).json({
      success: true,
      data: pollsData,
    });
  } catch (error) {
    console.error("Error fetching all polls:", error);
    res.status(500).json({
      success: false,
      message: "Internal server error",
      error: error.message,
    });
  }
}; 
 
const getPollById = async (req, res) => {
  // Implementation to get a poll by ID
};

const updatePoll = async (req, res) => {
  // Implementation to update a poll
};

const addQuestionSetToPoll = async (req, res) => {
  try {
    const { pollId } = req.params;
    const { type, text, options } = req.body;

    // Check if the poll exists
    const poll = await Poll.findByPk(pollId);
    if (!poll) {
      return res.status(404).json({
        success: false,
        message: "Poll not found",
      });
    }

    // Create a new question associated with the poll
    const newQuestion = await Question.create({
      type,
      text,
      PollId: pollId, // Associate the question with the specified poll
    });

    // Create options for the question
    const createdOptions = await Promise.all(
      options.map((optionText) =>
        Option.create({ text: optionText, QuestionId: newQuestion.id })
      )
    );

    // Update the question with the created options
    // newQuestion.setOptions(createdOptions);

    res.status(201).json({
      success: true,
      message: "Question set added to poll successfully",
      data: newQuestion,
    });
  } catch (error) {
    console.error("Error adding question set to poll:", error);
    res.status(500).json({
      success: false,
      message: "Internal server error",
      error: error.message,
    });
  }
};

const getAllQuestionsForPoll = async (req, res) => {
  // Implementation to get all questions for a poll
};

const getQuestionById = async (req, res) => {
  // Implementation to get a question by ID
};

const updateQuestion = async (req, res) => {
  // Implementation to update a question
};

const deleteQuestion = async (req, res) => {
  // Implementation to delete a question
};

module.exports = {
  createPoll,
  getAllPolls,
  getPollById,
  updatePoll,
  addQuestionSetToPoll,
  getAllQuestionsForPoll,
  getQuestionById,
  updateQuestion,
  deleteQuestion,
};
